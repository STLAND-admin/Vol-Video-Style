general {
    base_exp_dir = ./exp/CASE_NAME/result
    recording = [
        ./,
        ./models,
        ./models/LieAlgebra,
    ]
}

dataset {
    data_dir = /data0/styj/dycheck/datasets/hypernerf/CASE_NAME/
    render_cameras_name = cameras_sphere.npz
    object_cameras_name = cameras_sphere.npz
    # Camera
    is_monocular = True # if the camera setting is monocular, set True

    # Depth
    use_depth = True
    # scale factor of depth
    # e.g. a pixel value of 1000 in the depth image corresponds to a distance of 1 meter from the camera.
    depth_scale = 1.
    # Camera
    camera_trainable = True
}

train {
    learning_rate = 0.001
    learning_rate_final_value = 0.0001
    lr_num_steps = 250000
    end_iter = 250000
    batch_size = 3200
    validate_resolution_level = 4
    warm_up_end = 1
    anneal_end = 0
    igr_weight = 0.5
    mask_weight = 0.5
    # Depth
    geo_weight = 5.0
    angle_weight = 0.5
    # Deform
    use_deform = True
    # Anneal. Coarse-to-Fine Optimization.
    max_pe_iter = 70000

    save_freq = 50
    val_freq = 50
    val_mesh_freq = 50
    report_freq = 5000
    use_density = True
    validate_idx = -1 # index of validation
    warp_alpha_initial_value = 0.0
    warp_alpha_final_value = 6.0
    warp_alpha_num_steps = 80000
    
    ambient_alpha_initial_value = 0.0
    ambient_alpha_final_value = 6.0
    ambient_alpha_start_iter = 1000
    ambient_alpha_num_steps = 10000
}

test {
    test_batch_size = 800
}

model {
    # Deform
    deform_network {
        d_feature=8
        d_in = 3
        d_out_1 = 1 # t
        d_out_2 = 3 # (r,t) in 2d
        d_hidden = 128
        n_layers = 6
        skip_in = [4]
        multires = 8
        weight_norm = True
        normalizing_flow = False
    }
        
    

    # Deform
    topo_network {
        d_feature = 8
        d_in = 3
        d_out = 2
        d_hidden = 64
        n_layers = 6
        skip_in = [4]
        multires = 6
        bias = 0.0
        weight_norm = True
        isuse = True
    }

    sdf_network {
        alpha_channels = 1
        rgb_channels = 3
        d_in_1 = 3
        d_in_2 = 2
        rgb_branch_width = 128
        rgb_branch_depth = 2
        skips = [4]
        multires = 8
        multires_topo = 1
        trunk_depth = 8
        trunk_width = 256
        rgb_condition_dim = 0
    }

    variance_network {
        init_val = 0.3
    }



    # Deform
    appearance_rendering_network {
        d_feature = 256
        d_global_feature = 0
        mode = idr
        d_in = 9
        d_out = 3
        d_hidden = 256
        n_layers = 4
        weight_norm = True
        multires_view = 4
        squeeze_out = True
    }

    neus_renderer {
        begin_n_samples = 128
        end_n_samples = 16
        important_begin_iter = 0
        n_importance = 128
        up_sample_steps = 4
        perturb = 1.0
    }
}
